/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package robosim;

import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author karmakar_896187
 */
public class MainWindow extends javax.swing.JFrame {

    private TreeMap<Integer, Team> teams;
    private TreeSet<Team> rankedTeams;
    private TreeSet<Team> overallRankedTeams;
    private TreeSet<Match> matches;
    private TreeMap<Integer, Double> oprs;
    private TreeMap<Integer, Double> oprsModified;
    private ArrayList<Simulator> simulators;
    private int numRuns = 0;
    private File currentFile;
    

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {

        teams = new TreeMap<>();
        matches = new TreeSet<>();
        rankedTeams = new TreeSet<>();
        oprs = new TreeMap<>();
        oprsModified = new TreeMap<>();
        simulators = new ArrayList<>();
        overallRankedTeams = new TreeSet<>();

        initComponents();
        // Autosize the column widths
        table_matches.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        table_teamInfo.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        table_simulatedResults.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        /*
        ActionEvent evt = new ActionEvent(new Object(), 0, "");
        menuItem_fullDataActionPerformed(evt);
        menuItem_oprFromFileActionPerformed(evt);*/
        
        try {
            loadOPR(new Scanner(new File("TeamOPR.txt")));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR: OPR file not found!", "File Not Found", JOptionPane.ERROR_MESSAGE);
        }
        
        try {
            loadFullData(new Scanner(new File("1819AML_results_m3.csv"))); 
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR: Team list file not found!", "File Not Found", JOptionPane.ERROR_MESSAGE);
        }
        
        try {
            loadMatches(new Scanner(new File("MatchList.txt")));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR: Match list file not found!", "File Not Found", JOptionPane.ERROR_MESSAGE);
        }
        
                
            
        
        DefaultTableModel model = (DefaultTableModel) table_simulatedResults.getModel();

        for (Integer key : teams.keySet()) {
            Object[] initInfo = new Object[9];
            initInfo[1] = teams.get(key).getNumber();
            initInfo[2] = oprs.get(teams.get(key).getNumber());
            model.addRow(initInfo);
        }     
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        button1 = new java.awt.Button();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        tabbedPane = new javax.swing.JTabbedPane();
        pane_teamInfo = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table_teamInfo = new DisplayTable();
        pane_matchData = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_matches = new DisplayTable();
        button_generateMatches = new java.awt.Button();
        pane_simulator = new javax.swing.JPanel();
        button_runSimulator = new java.awt.Button();
        jScrollPane3 = new javax.swing.JScrollPane();
        table_simulatedResults = new DisplayTable();
        numSimRuns = new javax.swing.JSpinner();
        jScrollPane5 = new javax.swing.JScrollPane();
        table_displayOverallRanks = new javax.swing.JTable();
        label1 = new java.awt.Label();
        jSpinner_showRun = new javax.swing.JSpinner();
        jMenuBar1 = new javax.swing.JMenuBar();
        menu_import = new javax.swing.JMenu();
        menuItem_teamList = new javax.swing.JMenuItem();
        menuItem_teamData = new javax.swing.JMenuItem();
        menuItem_fullData = new javax.swing.JMenuItem();
        menuItem_matchesFromFile = new javax.swing.JMenuItem();
        menuItem_oprFromFile = new javax.swing.JMenuItem();
        menuItem_saveAs = new javax.swing.JMenuItem();
        menuItem_save = new javax.swing.JMenuItem();
        menuItem_openFile = new javax.swing.JMenuItem();

        button1.setLabel("button1");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        table_teamInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Team Number", "Team Name", "OPR", "Average Score From Historical Matches", "Historical Match Scores"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_teamInfo.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(table_teamInfo);

        javax.swing.GroupLayout pane_teamInfoLayout = new javax.swing.GroupLayout(pane_teamInfo);
        pane_teamInfo.setLayout(pane_teamInfoLayout);
        pane_teamInfoLayout.setHorizontalGroup(
            pane_teamInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1127, Short.MAX_VALUE)
        );
        pane_teamInfoLayout.setVerticalGroup(
            pane_teamInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 602, Short.MAX_VALUE)
        );

        tabbedPane.addTab("Team Information", pane_teamInfo);

        table_matches.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Match", "Red Score", "Red Alliance", "Blue Score", "Blue Alliance"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_matches.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table_matches);

        button_generateMatches.setLabel("Generate Matches");
        button_generateMatches.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_generateMatchesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pane_matchDataLayout = new javax.swing.GroupLayout(pane_matchData);
        pane_matchData.setLayout(pane_matchDataLayout);
        pane_matchDataLayout.setHorizontalGroup(
            pane_matchDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pane_matchDataLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(button_generateMatches, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59))
        );
        pane_matchDataLayout.setVerticalGroup(
            pane_matchDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 602, Short.MAX_VALUE)
            .addGroup(pane_matchDataLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(button_generateMatches, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Match Data", pane_matchData);

        button_runSimulator.setLabel("Run Simulator");
        button_runSimulator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_runSimulatorActionPerformed(evt);
            }
        });

        table_simulatedResults.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rank", "Team Number", "OPR", "TBP", "RP", "Average Score of Simulated Matches", "Standard Deviation of Simulated Matches", "High Score", "Simulated Scores"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(table_simulatedResults);

        table_displayOverallRanks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rank", "Team Number", "Average RP", "Average TBP"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(table_displayOverallRanks);

        label1.setText("Display Run:");

        jSpinner_showRun.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner_showRunStateChanged(evt);
            }
        });

        javax.swing.GroupLayout pane_simulatorLayout = new javax.swing.GroupLayout(pane_simulator);
        pane_simulator.setLayout(pane_simulatorLayout);
        pane_simulatorLayout.setHorizontalGroup(
            pane_simulatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(pane_simulatorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pane_simulatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pane_simulatorLayout.createSequentialGroup()
                        .addComponent(button_runSimulator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(numSimRuns, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(575, 575, 575))
                    .addGroup(pane_simulatorLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 748, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)))
                .addGroup(pane_simulatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pane_simulatorLayout.createSequentialGroup()
                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(jSpinner_showRun, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        pane_simulatorLayout.setVerticalGroup(
            pane_simulatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pane_simulatorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pane_simulatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pane_simulatorLayout.createSequentialGroup()
                        .addGroup(pane_simulatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pane_simulatorLayout.createSequentialGroup()
                                .addGroup(pane_simulatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(numSimRuns, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(button_runSimulator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(4, 4, 4)))
                        .addGap(11, 11, 11)
                        .addComponent(jScrollPane3))
                    .addGroup(pane_simulatorLayout.createSequentialGroup()
                        .addGap(0, 4, Short.MAX_VALUE)
                        .addComponent(jSpinner_showRun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 557, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        tabbedPane.addTab("Simulator", pane_simulator);

        menu_import.setText("File");

        menuItem_teamList.setText("Import Team List");
        menuItem_teamList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_teamListActionPerformed(evt);
            }
        });
        menu_import.add(menuItem_teamList);

        menuItem_teamData.setText("Import Team Data");
        menuItem_teamData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_teamDataActionPerformed(evt);
            }
        });
        menu_import.add(menuItem_teamData);

        menuItem_fullData.setText("Import Full Team Data");
        menuItem_fullData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_fullDataActionPerformed(evt);
            }
        });
        menu_import.add(menuItem_fullData);

        menuItem_matchesFromFile.setText("Import Matches From File");
        menuItem_matchesFromFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_matchesFromFileActionPerformed(evt);
            }
        });
        menu_import.add(menuItem_matchesFromFile);

        menuItem_oprFromFile.setText("Import OPR From File");
        menuItem_oprFromFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_oprFromFileActionPerformed(evt);
            }
        });
        menu_import.add(menuItem_oprFromFile);

        menuItem_saveAs.setText("Save As");
        menuItem_saveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_saveAsActionPerformed(evt);
            }
        });
        menu_import.add(menuItem_saveAs);

        menuItem_save.setText("Save");
        menuItem_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_saveActionPerformed(evt);
            }
        });
        menu_import.add(menuItem_save);

        menuItem_openFile.setText("Open File");
        menuItem_openFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_openFileActionPerformed(evt);
            }
        });
        menu_import.add(menuItem_openFile);

        jMenuBar1.add(menu_import);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuItem_teamListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_teamListActionPerformed
        // TODO add your handling code here:       
        try {
            
            File file;
            
            JFileChooser jfc = new JFileChooser();
            
            if(jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
                file = jfc.getSelectedFile();
            }else{
                return;
            }
            Scanner data = new Scanner(file);
            loadOPR(data);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR: Import File not found!", "File Not Found", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuItem_teamListActionPerformed

    private void menuItem_fullDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_fullDataActionPerformed

        try {
            
            File file;
            
            JFileChooser jfc = new JFileChooser();
            
            if(jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
                file = jfc.getSelectedFile();
            }else{
                return;
            }
            Scanner data = new Scanner(file);
            loadFullData(data);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR: Import File not found!", "File Not Found", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuItem_fullDataActionPerformed

    private void menuItem_matchesFromFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_matchesFromFileActionPerformed
        try {
            
            File file;
            
            JFileChooser jfc = new JFileChooser();
            
            if(jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
                file = jfc.getSelectedFile();
            }else{
                return;
            }
            Scanner data = new Scanner(file);
            loadMatches(data);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR: Import File not found!", "File Not Found", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuItem_matchesFromFileActionPerformed

    private void menuItem_oprFromFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_oprFromFileActionPerformed
        // TODO add your handling code here:

        try {
            
            File file;
            
            JFileChooser jfc = new JFileChooser();
            
            if(jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
                file = jfc.getSelectedFile();
            }else{
                return;
            }
            Scanner data = new Scanner(file);
            loadOPR(data);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR: Import File not found!", "File Not Found", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuItem_oprFromFileActionPerformed

    private void button_runSimulatorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_runSimulatorActionPerformed
       
        SpinnerNumberModel model = (SpinnerNumberModel) numSimRuns.getModel();
        SpinnerNumberModel model2 = (SpinnerNumberModel) jSpinner_showRun.getModel();
        
        simulators.clear();
        
        numRuns = (int) model.getValue();
        if(numRuns == 0){
            numRuns = 1;
            model.setValue(numRuns);
        }
        
        for(int i = 0; i < numRuns; i++){
            clearStructures();
            scoreMatches(new Simulator()); 
        }
        model2.setValue(simulators.size());
        displayResultsInTable(simulators.get(simulators.size()-1)); //Last 
        displayMatchesInTable(simulators.get(simulators.size()-1));
        displayOverallRanks();
        
    }//GEN-LAST:event_button_runSimulatorActionPerformed

    private void button_generateMatchesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_generateMatchesActionPerformed

        try {
            // TODO add your handling code here:
            //repopulate the table matches
            String command = "MatchMaker -g -a 2 -l teams.txt -u 3 -t 49 -r 5 -s";
            Process process = Runtime.getRuntime().exec(command);
            Scanner data = new Scanner(process.getInputStream());
            loadMatches(data);

        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_button_generateMatchesActionPerformed

    private void menuItem_teamDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_teamDataActionPerformed
        // TODO add your handling code here:
        try {
            
            File file;
            
            JFileChooser jfc = new JFileChooser();
            
            if(jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
                file = jfc.getSelectedFile();
            }else{
                return;
            }
            Scanner data = new Scanner(file);
            loadOPR(data);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR: Import File not found!", "File Not Found", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuItem_teamDataActionPerformed

    private void menuItem_saveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_saveAsActionPerformed
    
            JFileChooser jfc = new JFileChooser();
            
            jfc.setCurrentDirectory(new File(System.getProperty("user.dir")));
            
            if(jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION){
                writeModelToFile(jfc.getSelectedFile());
            }     
    }//GEN-LAST:event_menuItem_saveAsActionPerformed

    private void menuItem_openFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_openFileActionPerformed
        try {
            // TODO add your handling code here:
            
            JFileChooser jfc = new JFileChooser();
            jfc.setCurrentDirectory(new File(System.getProperty("user.dir")));
            
            if(jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){  
                currentFile = jfc.getSelectedFile();
                FileInputStream fis = new FileInputStream(currentFile);
                ObjectInputStream ois = new ObjectInputStream(fis);
                
                /*
                SimModel model = (SimModel) ois.readObject();
                
                teams = model.getTeams();
                matches = model.getMatches();
                rankedTeams = model.getRankedTeams();
                oprs = model.getOprs();
                */
                
                simulators.clear();
                boolean c = true;
                try{
                   //ObjectInputStream input = new ObjectInputStream(fis);
                   while(c){
                      Object obj = ois.readObject();
                      if(obj != null)
                        simulators.add((Simulator) obj);
                      else
                        c = false;
                   }
                }catch(Exception e){}
                
                teams = simulators.get(simulators.size()-1).getTeamList();
                matches = simulators.get(simulators.size()-1).getMatches();
                rankedTeams = simulators.get(simulators.size()-1).getRankedTeams();
                oprs = simulators.get(simulators.size()-1).getOprs();                
                oprsModified = oprs;
                                
                SpinnerNumberModel model = (SpinnerNumberModel) numSimRuns.getModel();
                SpinnerNumberModel model2 = (SpinnerNumberModel) jSpinner_showRun.getModel();
                
                model.setValue(simulators.size());
                model2.setValue(simulators.size());
                
                displayResultsInTable(simulators.get(simulators.size()-1));
                displayOverallRanks();
      
                displayTeamStatsTable();
                displayMatchesInTable();
            }            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuItem_openFileActionPerformed

    private void menuItem_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_saveActionPerformed
        // TODO add your handling code here:
        if(currentFile == null){
            menuItem_saveAsActionPerformed(evt);
        }else{
            writeModelToFile(currentFile);
        }
    }//GEN-LAST:event_menuItem_saveActionPerformed

    private void jSpinner_showRunStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner_showRunStateChanged
        // TODO add your handling code here:
         SpinnerNumberModel model = (SpinnerNumberModel) jSpinner_showRun.getModel();
        
        int pickRun = (int) model.getValue();
        if(pickRun < 1 || pickRun > simulators.size()){
            pickRun = numRuns;
            model.setValue(numRuns);
        }

        displayMatchesInTable(simulators.get(pickRun-1));
        displayResultsInTable(simulators.get(pickRun-1));
    }//GEN-LAST:event_jSpinner_showRunStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button button1;
    private java.awt.Button button_generateMatches;
    private java.awt.Button button_runSimulator;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSpinner jSpinner_showRun;
    private javax.swing.JTable jTable1;
    private java.awt.Label label1;
    private javax.swing.JMenuItem menuItem_fullData;
    private javax.swing.JMenuItem menuItem_matchesFromFile;
    private javax.swing.JMenuItem menuItem_openFile;
    private javax.swing.JMenuItem menuItem_oprFromFile;
    private javax.swing.JMenuItem menuItem_save;
    private javax.swing.JMenuItem menuItem_saveAs;
    private javax.swing.JMenuItem menuItem_teamData;
    private javax.swing.JMenuItem menuItem_teamList;
    private javax.swing.JMenu menu_import;
    private javax.swing.JSpinner numSimRuns;
    private javax.swing.JPanel pane_matchData;
    private javax.swing.JPanel pane_simulator;
    private javax.swing.JPanel pane_teamInfo;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTable table_displayOverallRanks;
    private javax.swing.JTable table_matches;
    private javax.swing.JTable table_simulatedResults;
    private javax.swing.JTable table_teamInfo;
    // End of variables declaration//GEN-END:variables

    private void addScoreToTeam(int number, String name, int score) {
        /*Method will check to see if team exists or not.
         If team exists, will add the score to the team scores TreeSet
         If does not exist, will create a Team object, add scores
         and add team to the teams TreeMap
         */

        Team team;

        if (teams.containsKey(number)) {
            team = teams.get(number);
        } else {
            team = new Team(name, number, new ArrayList<Integer>());
        }

        //Adds score to teams TreeSet
        team.getScores().add(score);

        teams.put(number, team);
    }
    
    private void scoreMatches(Simulator s) {
        int redScore, blueScore, r1, r2, b1, b2;
        double opr, std;
        boolean[] sur;
        int matchNum = 0;

        getNewOPRs();
        s.setOprs(oprsModified);
        button_generateMatchesActionPerformed(new ActionEvent(new Object(), 0, ""));
        
        for (Integer key : teams.keySet()) {
            teams.get(key).getScores_simulated().clear();
            teams.get(key).setTbp(0);
            teams.get(key).setRp(0);
        }

        for (Match m : matches) {
            matchNum++;
            redScore = 0;
            blueScore = 0;

            std = ScoreMaker.getSTD(teams.get(m.getRed1()).getScores());
            opr = oprsModified.get(m.getRed1());
            r1 = ScoreMaker.getScore(opr, std);

            std = ScoreMaker.getSTD(teams.get(m.getRed2()).getScores());
            opr = oprsModified.get(m.getRed2());
            r2 = ScoreMaker.getScore(opr, std);

            std = ScoreMaker.getSTD(teams.get(m.getBlue1()).getScores());
            opr = oprsModified.get(m.getBlue1());
            b1 = ScoreMaker.getScore(opr, std);

            std = ScoreMaker.getSTD(teams.get(m.getBlue2()).getScores());
            opr = oprsModified.get(m.getBlue2());
            b2 = ScoreMaker.getScore(opr, std);

            redScore = r1 + r2;
            blueScore = b1 + b2;

            m.setRedScore(redScore);
            m.setBlueScore(blueScore);

            sur = m.getSurrogate();

            teams.get(m.getRed1()).getScores_simulated().add(redScore);
            teams.get(m.getRed2()).getScores_simulated().add(redScore);
            teams.get(m.getBlue1()).getScores_simulated().add(blueScore);
            teams.get(m.getBlue2()).getScores_simulated().add(blueScore);

            teams.get(m.getRed1()).getMatchNumbers().add(m.getMatchNum());
            teams.get(m.getRed2()).getMatchNumbers().add(m.getMatchNum());
            teams.get(m.getBlue1()).getMatchNumbers().add(m.getMatchNum());
            teams.get(m.getBlue2()).getMatchNumbers().add(m.getMatchNum());

            if (redScore > blueScore) {
                if (!sur[0]) {
                    teams.get(m.getRed1()).addTBP(blueScore);
                }
                if (!sur[1]) {
                    teams.get(m.getRed2()).addTBP(blueScore);
                }
                if (!sur[2]) {
                    teams.get(m.getBlue1()).addTBP(blueScore);
                }
                if (!sur[3]) {
                    teams.get(m.getBlue2()).addTBP(blueScore);
                }
                if (!sur[0]) {
                    teams.get(m.getRed1()).addRP(2);
                }
                if (!sur[1]) {
                    teams.get(m.getRed2()).addRP(2);
                }

            } else if (redScore < blueScore) {
                if (!sur[0]) {
                    teams.get(m.getRed1()).addTBP(redScore);
                }
                if (!sur[1]) {
                    teams.get(m.getRed2()).addTBP(redScore);
                }
                if (!sur[2]) {
                    teams.get(m.getBlue1()).addTBP(redScore);
                }
                if (!sur[3]) {
                    teams.get(m.getBlue2()).addTBP(redScore);
                }

                if (!sur[2]) {
                    teams.get(m.getBlue1()).addRP(2);
                }
                if (!sur[3]) {
                    teams.get(m.getBlue2()).addRP(2);
                }
            } else {
                if (!sur[0]) {
                    teams.get(m.getRed1()).addRP(1);
                }
                if (!sur[1]) {
                    teams.get(m.getRed2()).addRP(1);
                }
                if (!sur[2]) {
                    teams.get(m.getBlue1()).addRP(1);
                }
                if (!sur[3]) {
                    teams.get(m.getBlue2()).addRP(1);
                }
            }
        }

        rankedTeams.clear();

        for (Integer t : teams.keySet()) {
            rankedTeams.add(teams.get(t));
            //oprs.get(t).intValue();
        }
        
        //FIX
        
        TreeMap<Integer,Team> clonedTeams = new TreeMap<>();
        
        for(Integer t: teams.keySet()){
            clonedTeams.put(t,teams.get(t).clone());
        }
        
        TreeSet<Team> clonedRankedTeams = new TreeSet<>();
        
        for(Team t: rankedTeams){
            clonedRankedTeams.add(t.clone());
        }
        
        TreeSet<Match> clonedMatches = new TreeSet<>();
        
        for(Match m: matches){
            clonedMatches.add(m.clone());
        }
        
       /** 
        * 
        * TreeMap<Integer, Double> clonedOprs = new TreeMap<>();
        
        for(Integer t: oprsModified.keySet()){
            clonedOprs.put(t,oprsModified.get(t));
        }
        s.setOprs(clonedOprs);
        * 
        * */
        
        s.setTeamList(clonedTeams);
        s.setRankedTeams(clonedRankedTeams);
        s.setMatches(clonedMatches);
        
        simulators.add(s);
        displayMatchesInTable();
    }

    private void displayTeamStatsTable() {
        /*Method will update the team stats in the TeamStatsTable
         based on changes to the teams TreeMap*/

        DefaultTableModel model = (DefaultTableModel) table_teamInfo.getModel();
        model.setRowCount(0);
        //menuItem_oprFromFileActionPerformed(new ActionEvent(new Object(), 0, ""));

        for (Integer key : teams.keySet()) {
            Object[] teamStats = new Object[5];
            Team t = teams.get(key);
            teamStats[0] = t.getNumber();
            teamStats[1] = t.getName();
            teamStats[2] = oprs.get(t.getNumber());
            teamStats[3] = String.format("%.2f", ScoreMaker.getAverage(t.getScores()));
            teamStats[4] = t.getScores();

            model.addRow(teamStats);
        }

    }
    
    private void displayMatchesInTable() {

        DefaultTableModel model = (DefaultTableModel) table_matches.getModel();
        model.setRowCount(0);

        for (Match m : matches) {
            Object[] matchData = new Object[5];

            String red1Num = (m.getSurrogate()[0]) ? "*" + m.getRed1() : "" + m.getRed1();
            String red2Num = (m.getSurrogate()[1]) ? "*" + m.getRed2() : "" + m.getRed2();
            String blue1Num = (m.getSurrogate()[2]) ? "*" + m.getBlue1() : "" + m.getBlue1();
            String blue2Num = (m.getSurrogate()[3]) ? "*" + m.getBlue2() : "" + m.getBlue2();

            String redAlliance = String.format("%6s%4s%6s", red1Num, "", red2Num);
            String blueAlliance = String.format("%6s%4s%6s", blue1Num, "", blue2Num);

            matchData[0] = m.getName();
            matchData[1] = m.getRedScore();
            matchData[2] = redAlliance;
            matchData[3] = m.getBlueScore();
            matchData[4] = blueAlliance;

            model.addRow(matchData);
        }

    }
    
    private void displayMatchesInTable(Simulator s) {

        DefaultTableModel model = (DefaultTableModel) table_matches.getModel();
        model.setRowCount(0);
        
        for (Match m : s.getMatches()) {
            Object[] matchData = new Object[5];
            
            String red1Num = (m.getSurrogate()[0]) ? "*" + m.getRed1() : "" + m.getRed1();
            String red2Num = (m.getSurrogate()[1]) ? "*" + m.getRed2() : "" + m.getRed2();
            String blue1Num = (m.getSurrogate()[2]) ? "*" + m.getBlue1() : "" + m.getBlue1();
            String blue2Num = (m.getSurrogate()[3]) ? "*" + m.getBlue2() : "" + m.getBlue2();

            String redAlliance = String.format("%6s%4s%6s", red1Num, "", red2Num);
            String blueAlliance = String.format("%6s%4s%6s", blue1Num, "", blue2Num);

            matchData[0] = m.getName();
            matchData[1] = m.getRedScore();
            matchData[2] = redAlliance;
            matchData[3] = m.getBlueScore();
            matchData[4] = blueAlliance;

            model.addRow(matchData);
        }
    }
    
    private void displayResultsInTable() {
        DefaultTableModel model = (DefaultTableModel) table_simulatedResults.getModel();
        model.setRowCount(0);
        
        int rank = 1;
        for (Team t : rankedTeams) {
            Object[] simStats = new Object[9];
            simStats[0] = rank;
            simStats[1] = t.getNumber();
            
            simStats[2] = oprsModified.get(t.getNumber());
            simStats[3] = t.getTbp();
            simStats[4] = t.getRp();
            simStats[5] = ScoreMaker.getAverage(t.getScores_simulated());
            simStats[6] = ScoreMaker.getSTD(t.getScores_simulated());
            simStats[7] = Collections.max(t.getScores_simulated());
            simStats[8] = t.getScores_simulated();

            model.addRow(simStats);
            rank++;
        }
        displayMatchesInTable();
    }
    
    private void displayResultsInTable(Simulator s) {
        DefaultTableModel model = (DefaultTableModel) table_simulatedResults.getModel();
        model.setRowCount(0);
                
        int rank = 1;
        for (Team t : s.getRankedTeams()) {
            Object[] simStats = new Object[9];
            simStats[0] = rank;
            simStats[1] = t.getNumber();
            simStats[2] = oprsModified.get(t.getNumber());
            simStats[3] = t.getTbp();
            simStats[4] = t.getRp();
            simStats[5] = ScoreMaker.getAverage(t.getScores_simulated());
            simStats[6] = ScoreMaker.getSTD(t.getScores_simulated());
            simStats[7] = Collections.max(t.getScores_simulated());
            simStats[8] = t.getScores_simulated();

            model.addRow(simStats);
            rank++;
        }
    }
    
    private void displayOverallRanks(){
        
        DefaultTableModel display = (DefaultTableModel) table_displayOverallRanks.getModel();
        display.setRowCount(0);
        
        //organize by average RP and average TBP
        //make RP and TBP treeMaps 
        double totalRP, totalTBP;
        
        TreeMap<Integer,Team> cT = new TreeMap<>();
        
        for(Integer t: teams.keySet()){
            cT.put(t,teams.get(t).clone());
        }
                
        for(Integer k: cT.keySet()){
            totalRP = 0.0;
            totalTBP = 0.0;
            
            for(Simulator s: simulators){
                totalRP += s.getTeamList().get(k).getRp();
                totalTBP += s.getTeamList().get(k).getTbp();
            }
            cT.get(k).setRp(totalRP/simulators.size());
            cT.get(k).setTbp(totalTBP/simulators.size());
        }
        
        overallRankedTeams.clear();
        
        for (Integer t : cT.keySet()) {
            overallRankedTeams.add(cT.get(t));
        }
        
        int rank = 1;
        for (Team t : overallRankedTeams) {
            Object[] simStats = new Object[4];
            simStats[0] = rank;
            simStats[1] = t.getNumber();
            simStats[2] = String.format("%.1f", t.getRp());
            simStats[3] = String.format("%.1f", t.getTbp());

            display.addRow(simStats);
            rank++;
        }    
        
    }
    
    private void getNewOPRs(){        
        DefaultTableModel model = (DefaultTableModel) table_simulatedResults.getModel();
        int r = 0;
        for (Integer t : teams.keySet()) {
            oprsModified.put((Integer) model.getValueAt(r, 1), (Double) model.getValueAt(r, 2));
            r++;
        }
        
    }

    private void loadMatches(Scanner data) {

        matches = new TreeSet();

        while (data.hasNextLine()) {
            // matchNum++;
            Scanner line = new Scanner(data.nextLine());

            boolean[] sur = {false, false, false, false};

            if(line.hasNext() && line.hasNextInt()){
                String name = line.next(); //Get match name

                int red1 = line.nextInt();
                sur[0] = (line.nextInt() == 1);
                int red2 = line.nextInt();
                sur[1] = (line.nextInt() == 1);
                int blue1 = line.nextInt();
                sur[2] = (line.nextInt() == 1);
                int blue2 = line.nextInt();
                sur[3] = (line.nextInt() == 1);

                Match m = new Match(name, red1, red2, blue1, blue2, sur);
                matches.add(m);
            }
        } 
        displayMatchesInTable();
    }
    
    private void loadOPR(Scanner data) {

        oprs = new TreeMap();

        while (data.hasNextLine()) {
            Scanner line = new Scanner(data.nextLine());
            line.useDelimiter("\t");
            int team = line.nextInt(); //Get team number
            double opr = line.nextDouble();
            oprs.put(team, opr);
        } 
    }
    
    private void loadFullData(Scanner data) {
        while (data.hasNextLine()) {
            Scanner line = new Scanner(data.nextLine());
                line.useDelimiter(",");

                line.next();
                line.next();
                line.next();

                int redScore = line.nextInt();
                int blueScore = line.nextInt();

                int red1 = line.nextInt();
                String red1Name = line.next();

                int red2 = line.nextInt();
                String red2Name = line.next();

                int blue1 = line.nextInt();
                String blue1Name = line.next();

                int blue2 = line.nextInt();
                String blue2Name = line.next();

                addScoreToTeam(red1, red1Name, redScore);
                addScoreToTeam(red2, red2Name, redScore);
                addScoreToTeam(blue1, blue1Name, blueScore);
                addScoreToTeam(blue2, blue2Name, blueScore);
        } 
        displayTeamStatsTable();
    }
    
    private void writeModelToFile(File file){
        try {
            FileOutputStream fos = new FileOutputStream(file);
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            //oos.writeObject(new SimModel(teams, rankedTeams, matches, oprs));
            for(Simulator s: simulators){
                oos.writeObject(s);
            }
            currentFile = file;
            oos.close();
            menuItem_save.setEnabled(false);
        } catch (FileNotFoundException ex) {
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void clearStructures(){
        TreeMap<Integer, Team> newTeams = new TreeMap<>();
        for (Integer n : teams.keySet()) {
            Team t = teams.get(n);
            t.clear();
            newTeams.put(n, t);
        }
        teams = newTeams;
        rankedTeams.clear();
        
        TreeSet newMatches = new TreeSet<>();
        for (Match m : matches) {
            m.clear();
            newMatches.add(m);
        }
        matches = newMatches;
    }
}